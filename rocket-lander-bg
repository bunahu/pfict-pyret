#Last Updated: 14 Jul 2021, Phoenix, AZ

provide *

#|provide {
    make-lander : make-lander,
    demo-lander : demo-lander,
    delta-t : delta-t,
    WIDTH : WIDTH,
    HEIGHT : HEIGHT,
    ground-height : ground-height,
    default-next-x : default-next-x,
    default-is-onscreen-x  : default-is-onscreen-x,
    default-next-y : default-next-y,
    default-next-vy : default-next-vy,
    default-force-for-key  : default-force-for-key,
    default-sum-of-forces  : default-sum-of-forces,
    default-a-from-f : default-a-from-f,
    default-game-status  : default-game-status
   } end
|#
include image
include reactors



WIDTH = 800
HEIGHT = 600
GROUND-MAX = 150
SPACE = rectangle(WIDTH, HEIGHT, "solid", "black")
fun make-planet(img):
  img-width = image-width(img)
  img-height = image-height(img)
  scaled-img = 
    if (img-width >= WIDTH) and (img-height >= GROUND-MAX): img
    else: scale(num-max(GROUND-MAX / img-height, WIDTH / img-width), frame(img))
    end
  crop-x = num-max((image-width(scaled-img) - WIDTH) / 2, 0)
  crop(crop-x, 0, WIDTH, GROUND-MAX, scaled-img)
end
heights = [list:
  {0; 60},
  {120; 60}, # At x = 0, y = 60; rising smoothly to y = 60 at x = 120
  {140; 70},
  {180; 70},
  {270; 100},
  {400; 115},
  {500; 100},
  {645; 100},
  {800; 110}
]
fun ground-help(x, prev, rest):
  cases(List) rest:
    | empty => prev.{1}
    | link(next, tail) =>
      if (x <= next.{0}): 
        alpha = ((x - prev.{0}) / (next.{0} - prev.{0}))
        prev.{1} + ((next.{1} - prev.{1}) * alpha)
      else: ground-help(x, next, tail)
      end
  end
end

fun ground-height(x):
  ground-help(x, heights.first, heights.rest)
end





fun make-lander(planet-img, rocket-img, m, vx, gy, 
    next-x, 
    is-onscreen-x, 
    next-y, 
    next-vy, 
    a-from-f,
    thrust-from-key, 
    # drag,
    sum-forces, 
    game-status):
  
  
  init-state = {50; 500; vx; 0; gy; 0}
#{x; y; vx; vy; ay; thrust}
  PLANET = make-planet(planet-img)
  BACKGROUND = overlay-align("middle", "bottom", PLANET, SPACE)
  raw-flames = image-url("https://drive.google.com/uc?export=download&id=1AHFPbu54o2joGarFF_yvzHBtfPHtYlk0")
  #  FLAMES = scale(0.5 * (image-width(rocket-img) / image-width(raw-flames)),raw-flames)
rocket-half-height = image-height(rocket-img) / 2
#flames-half-height = image-height(FLAMES) / 2
  fun next-state({x; y; vx-1; vy; ay; thrust-factor}):
    new-x = if is-onscreen-x(x):
      next-x(x, vx)
    else: 0
    end
    #drag-f = drag(num-sqrt((vx * vx) + (vy * vy)))
      new-ay = a-from-f(sum-forces(thrust-factor * num-abs(0.5 * m * gy)))
      
    new-vy = next-vy(vy, new-ay)
    avg-vy = (vy + new-vy) / 2
    new-y = next-y(y, avg-vy)
    {new-x; new-y; vx-1; new-vy; ay; thrust-factor}
  end

  fun key-function({x; y; vx-1; vy; ay; thrust-factor}, key):  
    {x; y; vx-1; vy; ay; thrust-from-key(thrust-factor, key)}
  end

  fun draw-scene({x; y; vx-1; vy; ay; thrust}):
    rocket-bkg = 
      put-image(rocket-img, x, y + rocket-half-height, BACKGROUND)
    FLAMES = scale((0.5 * num-abs(thrust)) * (image-width(rocket-img) / image-width(raw-flames)),
      scale-xy(1, 2, raw-flames))         
          flames-half-height = image-height(FLAMES) / 2
   
    with-flames =
      ask:
        | y < ground-height(x) then: 
          rocket-bkg
        | thrust < 0 then:
          put-image(rotate(180, FLAMES),
            x, y + flames-half-height + (2 * rocket-half-height),
            rocket-bkg)
        | thrust > 0 then:
          put-image(FLAMES,
            x, y - flames-half-height,
            rocket-bkg)
        | otherwise: rocket-bkg
      end
    overlay-align("middle", "top", 
      above(
        text(game-status(x, y, vy), 30, "white"),
        text("x = " + num-to-string-digits(x, 3) +
          ", y = " + num-to-string-digits(y, 3) +
          ", vy = " + num-to-string-digits(vy, 3) +
          ", thrust-y = " + num-to-string-digits(thrust * (num-abs(0.5 * m * gy)), 3), 20, "light gray")),
      with-flames)
    
  end

  fun stop({x; y; vx-1; vy; ay; thrust}):
    y < ground-height(x)
  end

  game = reactor:
    init: init-state,
    title: "Lander!",
    on-tick: next-state,
    on-key: key-function,
    to-draw: draw-scene,
    stop-when: stop
  end
  interact(game)


end

delta-t = 0.05

###########################################################################
# INERT CODE BELOW
MAR-S = image-url("https://drive.google.com/uc?export=download&id=1fCcB6IuEUJN3JNsksDE0gtCAXc7-Qw_5")
ROCK-ET = scale(0.2, image-url("https://code.pyret.org/shared-image-contents?sharedImageId=1npNv8bo_6cSn-s0x_I3PtMAVoXtsUDtJ"))
ma-ss = 533 # kg
v--x = 35 # m/s
gy = -3.711 # N/kg

# Computes the next x-position of the rocket, given its 
# current position and velocity
fun default-next-x(x, vx):
  x
  #x + (vx * delta-t)
end

fun default-is-onscreen-x(x):
  #x < 800
  true
end

# Computes the next y-position of the rocket, given its 
# current position and velocity
fun default-next-y(y, vy):
  y
  #y + (vy * delta-t)
end

# Computes the next y-velocity of the rocket, given its 
# current velocity and acceleration
fun default-next-vy(vy, ay):
  vy
  #vy + (ay * delta-t)
end

# Computes the net force on the rocket, to determine acceleration
# NOTE: Could be `net-accel` instead of `net-force`, but that's up 
# to physics folks
fun default-sum-of-forces(rocket-force):
  #(mass * gy) + rocket-force  
  ma-ss * gy
end

fun default-a-from-f(rocket-force):
  gy
end

fun default-drag(v):
  0
end

# Captions the game with a status message
fun default-game-status(x, y, vy):
  #|if (y < ground-height(x)) and (vy <= -8):
    "crashed"
  else if (y < ground-height(x)) and (vy > -8):
    "landed"
  else: "flying" 
  end
  |#
  "Flying"
end

# Controls the throttle, to determine the force applied to the rocket.
# NOTE: Can totally cheat here and be non-physical, by returning a negative 
# force...
fun default-thrust-from-key(cur-force, key):
  #|if key == "up":
    cur-force + 1
  else if key == "down":
    cur-force - 1
  else: cur-force
  end|#
  0
end



fun demo-lander():
  make-lander(
    MAR-S, ROCK-ET, # IMAGES
    ma-ss, v--x, gy, # PARAMETERS
    default-next-x, 
    default-is-onscreen-x,
    default-next-y, 
    default-next-vy,
    default-a-from-f,
    default-thrust-from-key,
    # default-drag,
    default-sum-of-forces, 
    default-game-status # controllers
    )
end
